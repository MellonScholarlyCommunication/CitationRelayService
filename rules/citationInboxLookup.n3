@prefix ex:   <http://example.org/> .
@prefix as:   <https://www.w3.org/ns/activitystreams#> .
@prefix sorg: <https://schema.org/>.
@prefix pol:  <https://www.example.org/ns/policy#> .
@prefix fno:  <https://w3id.org/function/ontology#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix bibo: <http://purl.org/ontology/bibo/> .
@prefix cito: <http://purl.org/spar/cito/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .

{
    # We need an as:Offer...
    ?id a as:Offer .
    
    # ... of type ex:CitationExtraction
    ?id a ex:CitationRelay .

    # ...which contains a object
    ?id as:object ?object .

    # ...of type ParsedCitationDocument
    ?object a ex:ParsedCitationDocument .

    # Extract the graph from the ParsedCitationDocument .
    ?object log:semantics ?citationGraph . 

    # The citation graph should contains a bibo:cites
    ?citationGraph log:includes {
        ?citationId 
            cito:hasCitingEntity ?publicaton ;
            cito:hasCitedEntity ?citation .
    } .

    # Create an output directory for the parsed data
    ?id log:uuid ?uuid .
    ( "in/" ?uuid ".ttl") string:concatenation ?outPath .
    ?outUrl log:uri ?outPath .
}
=>
{
    # When the conditions above hold, the I want a policy executed
    # to relay the citations

    # Locate the inboxes for the bibo:mention
    ex:MyMentionInboxLocator pol:policy ex:MyMentionInboxLocatorPolicy .
    ex:MyMentionInboxLocatorPolicy  
        a fno:Execution ;
        fno:executes ex:inboxLocator ;
        ex:subject ?publication ;
        ex:predicate bibo:cites ;
        ex:object ?citation .

    # Write the main store to a file
    ex:MyWriteMainStore pol:policy  ex:MyWriteMainStorePolicy .
    ex:MyWriteMainStorePolicy 
        a fno:Execution ;
        sh:order 1000 ;
        fno:executes ex:serializeAs ;
        ex:path ?outUrl .
}.